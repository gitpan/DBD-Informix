#!/usr/bin/perl -sw
#
# @(#)$Id: Makefile.NT,v 57.1 1997/11/14 03:09:05 johnl Exp $ 
#
# NT Adaptations Copyright (c) 1997 Harald Ums (Harald.Ums@sevensys.de)
# Portions Copyright (c) 1996,1997 Jonathan Leffler (johnl@informix.com)
# Portions Copyright (c) 1996 Alligator Descartes (descarte@arcana.co.uk)
# From an original by Tim Bunce (Tim.Bunce@ig.co.uk)
#
# You may distribute under the terms of either the GNU General Public
# License or the Artistic License, as specified in the Perl README file.

use ExtUtils::MakeMaker qw(&WriteMakefile $Verbose);
use Config;
# A sufficiently recent version of DBI must be installed before we can
# build any DBD module.  
use DBI 0.90;

$| = 1;     # Ensure that Perl output is interleaved with test output.

%opts = (
    'NAME'         => 'DBD::Informix',
    'VERSION_FROM' => 'Informix.pm',
);

print "\nConfiguring DBD::Informix...\n";
print "Remember to actually read the README file!\n\n";

# Compare installed version of DBI with version which DBD::Informix was
# last tested with.
# The required and reference versions are the same for this release.
$dbi_ref_version = "0.90";
die "\n*** You must upgrade to DBI version $dbi_ref_version or later.\n\n"
    unless ($DBI::VERSION >= $dbi_ref_version);

# Trying to find ESQL (and determining INFORMIXDIR too)
foreach $p (split( /;/, $ENV{PATH}))
{
    if( -x "$p/ESQL.EXE")
    {
		# HUMS: \\ needed, because string goes into Makefile (via postamble)
        $esql="$p\\ESQL.EXE"; 
		# HUMS: \\ necessary because string comes from ENV
        $p  =~ s/\\BIN//i;
        $ID=$p;
        break;
    }
}
if( ! defined $esql)
{
    die "could not find ESQL";
}
else
{
	print "Using $esql\n";
}

# --- Find out which version of Informix ESQL/C by running 'esql -V'
open(ESQL, "$esql -V |") || die "Couldn't get Version";
die "Failed to read anything from 'esql -V'\n"
    unless defined ($infversion = <ESQL>);
while(<ESQL>) { }       # Rest of input (1 line) to avoid Broken Pipe messages
close ESQL;

chomp($infversion);
$infversion =~ s/[  ]+$//;
($version = $infversion) =~ s/INFORMIX.* Version (....).*/$1/;
die "Unexpected message from esql script -- $version\n"
    unless ($version =~ /[0-9]\.[0-9][0-9]/);
($vernum = $version) =~ s/^([0-9])\./$1/;

print "Using $infversion from $ID\n";

$vercode = "esqlc_v6";
$multiconn = 1;
if ($vernum >= 500 && $vernum < 510)
{
    $vercode = "esqlc_v5";
    $multiconn = 0;
}

#
# -- Configure the make process
#

# Define the version of ESQL/C for the object code.
$opts{DEFINE}  = " -DESQLC_VERSION=$vernum";

$have_odbc_lib=0;
foreach $p (split( / /, $Config{'libpth'}))
{
    if( -f "$p/ODBC32.LIB" )
    {
        $have_odbc_lib=1;
        break;
    }
}

$have_odbc_inc=0;
foreach $p (split( / /, $Config{'incpath'}))
{
    if( -f "$p/SQLEXT.H" )
    {
        $have_odbc_inc=1;
        break;
    }
}

if( $have_odbc_lib && $have_odbc_inc)
{
    print "You've got Informix-CLI or equivalent ODBC software installed.\n";
	print "But we won't use it, even so.\n";
    $inst_odbc = 0;
}
else
{
    print "You don't seem to have the Informix-CLI software installed.\n";
    print "Never mind; I'll use the home-brew header odbctype.h instead.\n";
    $inst_odbc = 0;
    $opts{INC} = " ";
}
print "\n";

# The ESQL/C script does not handle options with spaces and quotes, dammit!
# Hence, create $versionfile to contain ESQLC_VERSION_STRING.
# Also use it to decide whether ODBC is available or not.
{
$versionfile = "esqlvrsn.h";
unlink $versionfile;
die "Unable to open $versionfile for writing\n"
    unless open(VERSION, ">$versionfile");
print VERSION "#define ESQLC_VERSION_STRING \"$infversion\"\n";
if (defined $inst_odbc)
{
    print VERSION "#ifndef USE_INSTALLED_ODBC\n";
    print VERSION "#define USE_INSTALLED_ODBC $inst_odbc\n";
    print VERSION "#endif /* USE_INSTALLED_ODBC */\n";
}
close VERSION;
}

if ($Config{"prototype"} eq 'define')
{
    $opts{DEFINE} .= " -DUSE_PROTOTYPES -DESQLC_STRICT_PROTOTYPES";
}
else
{
    print "\nGosh!  Perl doesn't think your compiler handles prototypes.\n";
    print "Well, even though I don't believe it, we'll take Perl's word\n";
    print "for it and we won't try to force them into use.\n";
    print "Don't you need to upgrade your compiler?\n";
}

if ($vernum >= 500 && $vernum < 510)
{
	$opts{DEFINE} .= " -DWINNT -Dfar=";
}

my($objext);
$objext = $Config{obj_ext};
$objects = "Informix.o dbdimp.o dbdattr.o";
$objects .= " sqltype.o ixblob.o decsci.o odbctype.o link.o $vercode.o";
$objects =~ s/\.o\w/$objext/g if ($objext ne ".o");

# Need to pick up the DBI headers.
# NB: If using ESQL/C 4.xy, use -I$ID/incl, not -I$ID/incl/esql!
# However, you've got other major work to do to handle 4.xy ESQL/C.
# With DBI-0.77 and up, DBIXS.h is in an auto sub-directory.

if ($vernum >= 500 && $vernum < 510)
{
	$INC1 = "-I$ID/incl";
}
else
{
	$INC1 = "-I$ID/incl/esql";
}

$inc_pad = "/auto" if ($DBI::VERSION >= 0.77);
$INC2 = "-I\$(INSTALLSITEARCH)$inc_pad/DBI";

$opts{INC} .= " $INC1 $INC2";
$opts{OBJECT} = $objects;

if ($vernum >= 500 && $vernum < 510)
{
	$libs=" ISQLI501.LIB LMCSQLW.LIB ";
	$opts{dynamic_lib} = { OTHERLDFLAGS => "/LIBPATH:$ID/lib $libs"};
}
elsif ($vernum >= 600)
{
    print "Fortunately, you are using a new version of ESQL/C and\n";
    print "we can use 'esql -libs' to tell us which libraries to use.\n";
    my $libs = `$esql -libs` || die "Couldn't execute 'esql -libs'";
    $libs =~ s/Libraries to be used://gm;
    $libs =~ s/esql: error -55923: No source or object file\.//gm;
    $libs =~ s/\n/ /gm;
    $opts{dynamic_lib} = { OTHERLDFLAGS => "/LIBPATH:$ID/lib /LIBPATH:$ID/lib/esql $libs"};
}
else
{
    print "Unfortunately, you are also using a version of ESQL/C which\n";
    print "cannot tell us which libraries it needs.\n";
    print "We'll assume that esqlld can sort things out for you.\n";
    print "Contact the DBD::Informix maintenance team if it doesn't.\n";
    # Do not override default version of $opts{LD}
}
print "\n";

# log key platform information to help me help you quickly
print "Perl:     perl$] @Config{qw(archname dlsrc)}\n";
print "System:   @Config{qw(myuname)}\n";
print "Compiler: @Config{qw(cc optimize ccflags)}\n";

# Probably cause for being thrown out of The Perl Institute, but TMTOWTDI!
system "perl t/dtgen.pl > t/dtgen.sql";
system "perl t/decgen.pl > t/decgen.sql";

WriteMakefile(%opts, dist => { COMPRESS => 'gzip', SUFFIX => 'gz' });

# Define a postamble for the makefile which briefs MAKE on how to compile
# ESQL/C source code.  It gives .ec rules (and files) precedence over .c
# files with the same name by zapping and reorganizing the entire suffix
# list.  The .SUFFIXES list is copied the MakeMaker constants section.
# It's a pity that changing this list cannot be handled more cleanly.  It
# doesn't really matter whether .xs files have precedence over .ec files or
# not -- it would be OK to place .ec in front of the standard list.

sub MY::postamble {
"
# ESQL/C compilation rules
ESQL = $esql
" .
'
.SUFFIXES:
.SUFFIXES: .xs .ec .c .C .cpp .cxx .cc $(OBJ_EXT) .sh

# Cribbed from the definition of CCCMD (MakeMaker const_cccmd) and the
# rules for compiling object files (MakeMakerc_o) in the Makefile.
ESQLFLAGS = $(INC) -cc $(CCFLAGS) $(OPTIMIZE) \
        $(PERLTYPE) $(LARGE) $(SPLIT) $(DEFINE_VERSION) \
        $(XS_DEFINE_VERSION) $(CCCDLFLAGS) -I$(PERL_INC) $(DEFINE)

clean::
    $(RM_F) *.c_

.ec.obj:
    $(ESQL) -c $(ESQLFLAGS) $*.ec
    $(RM_F) $*.c
'
}

# Cleanly exit from the Makefile-build process

exit 0;

__END__

